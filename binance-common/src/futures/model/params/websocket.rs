use std::fmt;

#[derive(Debug)]
pub enum Symbol {
    AdaUsdc,
    AdaUsdt,
    AvaxUsdc,
    AvaxUsdt,
    BnbUsdc,
    BnbUsdt,
    BchUsdt,
    BtcUsdc,
    BtcUsdt,
    CfxUsdt,
    DogeUsdc,
    DogeUsdt,
    EgldUsdt,
    EnaUsdt,
    EthUsdc,
    EthUsdt,
    EthBusd,
    FilUsdc,
    IcpUsdt,
    LinkUsdc,
    LinkUsdt,
    LiteUsdc,
    LtcUsdt,
    MaticUsdc,
    MaticUsdt,
    SolUsdc,
    SolUsdt,
    DotBusd,
    DotUsdt,
    XrpUsdc,
    XrpUsdt,
    PenguUsdt,
}

impl fmt::Display for Symbol {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let s = match self {
            Symbol::AdaUsdc => "adausdc",
            Symbol::AdaUsdt => "adausdt",
            Symbol::AvaxUsdc => "avaxusdc",
            Symbol::AvaxUsdt => "avaxusdt",
            Symbol::BnbUsdc => "bnbusdc",
            Symbol::BnbUsdt => "bnbusdt",
            Symbol::BchUsdt => "bchusdt",
            Symbol::BtcUsdc => "btcusdc",
            Symbol::BtcUsdt => "btcusdt",
            Symbol::CfxUsdt => "cfxusdt",
            Symbol::DogeUsdc => "dogeusdc",
            Symbol::DogeUsdt => "dogeusdt",
            Symbol::EnaUsdt => "enausdt",
            Symbol::EgldUsdt => "egldusdt",
            Symbol::EthUsdc => "ethusdc",
            Symbol::EthUsdt => "ethusdt",
            Symbol::EthBusd => "ethbusd",
            Symbol::FilUsdc => "filusdc",
            Symbol::IcpUsdt => "icpusdt",
            Symbol::LinkUsdc => "linkusdc",
            Symbol::LinkUsdt => "linkusdt",
            Symbol::LiteUsdc => "ltcusdc",
            Symbol::LtcUsdt => "ltcusdt",
            Symbol::MaticUsdc => "maticusdc",
            Symbol::MaticUsdt => "maticusdt",
            Symbol::SolUsdc => "solusdc",
            Symbol::SolUsdt => "solusdt",
            Symbol::DotBusd => "dotbusd",
            Symbol::DotUsdt => "dotusdt",
            Symbol::XrpUsdc => "xrpusdc",
            Symbol::XrpUsdt => "xrpusdt",
            Symbol::PenguUsdt => "penguusdt",
        };
        write!(f, "{s}")
    }
}
